"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TrackedWeakMap = exports.TrackedMap = void 0;
const ember_tracked_storage_polyfill_1 = require("ember-tracked-storage-polyfill");
class TrackedMap {
    constructor(existing) {
        this.collection = (0, ember_tracked_storage_polyfill_1.createStorage)(null, () => false);
        this.storages = new Map();
        // TypeScript doesn't correctly resolve the overloads for calling the `Map`
        // constructor for the no-value constructor. This resolves that.
        this.vals = existing ? new Map(existing) : new Map();
    }
    readStorageFor(key) {
        const { storages } = this;
        let storage = storages.get(key);
        if (storage === undefined) {
            storage = (0, ember_tracked_storage_polyfill_1.createStorage)(null, () => false);
            storages.set(key, storage);
        }
        (0, ember_tracked_storage_polyfill_1.getValue)(storage);
    }
    dirtyStorageFor(key) {
        const storage = this.storages.get(key);
        if (storage) {
            (0, ember_tracked_storage_polyfill_1.setValue)(storage, null);
        }
    }
    // **** KEY GETTERS ****
    get(key) {
        // entangle the storage for the key
        this.readStorageFor(key);
        return this.vals.get(key);
    }
    has(key) {
        this.readStorageFor(key);
        return this.vals.has(key);
    }
    // **** ALL GETTERS ****
    entries() {
        (0, ember_tracked_storage_polyfill_1.getValue)(this.collection);
        return this.vals.entries();
    }
    keys() {
        (0, ember_tracked_storage_polyfill_1.getValue)(this.collection);
        return this.vals.keys();
    }
    values() {
        (0, ember_tracked_storage_polyfill_1.getValue)(this.collection);
        return this.vals.values();
    }
    forEach(fn) {
        (0, ember_tracked_storage_polyfill_1.getValue)(this.collection);
        this.vals.forEach(fn);
    }
    get size() {
        (0, ember_tracked_storage_polyfill_1.getValue)(this.collection);
        return this.vals.size;
    }
    [Symbol.iterator]() {
        (0, ember_tracked_storage_polyfill_1.getValue)(this.collection);
        return this.vals[Symbol.iterator]();
    }
    get [Symbol.toStringTag]() {
        return this.vals[Symbol.toStringTag];
    }
    // **** KEY SETTERS ****
    set(key, value) {
        this.dirtyStorageFor(key);
        (0, ember_tracked_storage_polyfill_1.setValue)(this.collection, null);
        this.vals.set(key, value);
        return this;
    }
    delete(key) {
        this.dirtyStorageFor(key);
        (0, ember_tracked_storage_polyfill_1.setValue)(this.collection, null);
        return this.vals.delete(key);
    }
    // **** ALL SETTERS ****
    clear() {
        this.storages.forEach((s) => (0, ember_tracked_storage_polyfill_1.setValue)(s, null));
        (0, ember_tracked_storage_polyfill_1.setValue)(this.collection, null);
        this.vals.clear();
    }
}
exports.TrackedMap = TrackedMap;
// So instanceof works
Object.setPrototypeOf(TrackedMap.prototype, Map.prototype);
class TrackedWeakMap {
    constructor(existing) {
        this.storages = new WeakMap();
        // TypeScript doesn't correctly resolve the overloads for calling the `Map`
        // constructor for the no-value constructor. This resolves that.
        this.vals = existing ? new WeakMap(existing) : new WeakMap();
    }
    readStorageFor(key) {
        const { storages } = this;
        let storage = storages.get(key);
        if (storage === undefined) {
            storage = (0, ember_tracked_storage_polyfill_1.createStorage)(null, () => false);
            storages.set(key, storage);
        }
        (0, ember_tracked_storage_polyfill_1.getValue)(storage);
    }
    dirtyStorageFor(key) {
        const storage = this.storages.get(key);
        if (storage) {
            (0, ember_tracked_storage_polyfill_1.setValue)(storage, null);
        }
    }
    get(key) {
        this.readStorageFor(key);
        return this.vals.get(key);
    }
    has(key) {
        this.readStorageFor(key);
        return this.vals.has(key);
    }
    set(key, value) {
        this.dirtyStorageFor(key);
        this.vals.set(key, value);
        return this;
    }
    delete(key) {
        this.dirtyStorageFor(key);
        return this.vals.delete(key);
    }
    get [Symbol.toStringTag]() {
        return this.vals[Symbol.toStringTag];
    }
}
exports.TrackedWeakMap = TrackedWeakMap;
// So instanceof works
Object.setPrototypeOf(TrackedWeakMap.prototype, WeakMap.prototype);
//# sourceMappingURL=data:application/json;base64,