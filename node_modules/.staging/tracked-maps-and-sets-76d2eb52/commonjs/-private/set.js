"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TrackedWeakSet = exports.TrackedSet = void 0;
const ember_tracked_storage_polyfill_1 = require("ember-tracked-storage-polyfill");
class TrackedSet {
    constructor(existing) {
        this.collection = (0, ember_tracked_storage_polyfill_1.createStorage)(null, () => false);
        this.storages = new Map();
        this.vals = new Set(existing);
    }
    storageFor(key) {
        const storages = this.storages;
        let storage = storages.get(key);
        if (storage === undefined) {
            storage = (0, ember_tracked_storage_polyfill_1.createStorage)(null, () => false);
            storages.set(key, storage);
        }
        return storage;
    }
    dirtyStorageFor(key) {
        const storage = this.storages.get(key);
        if (storage) {
            (0, ember_tracked_storage_polyfill_1.setValue)(storage, null);
        }
    }
    // **** KEY GETTERS ****
    has(value) {
        (0, ember_tracked_storage_polyfill_1.getValue)(this.storageFor(value));
        return this.vals.has(value);
    }
    // **** ALL GETTERS ****
    entries() {
        (0, ember_tracked_storage_polyfill_1.getValue)(this.collection);
        return this.vals.entries();
    }
    keys() {
        (0, ember_tracked_storage_polyfill_1.getValue)(this.collection);
        return this.vals.keys();
    }
    values() {
        (0, ember_tracked_storage_polyfill_1.getValue)(this.collection);
        return this.vals.values();
    }
    forEach(fn) {
        (0, ember_tracked_storage_polyfill_1.getValue)(this.collection);
        this.vals.forEach(fn);
    }
    get size() {
        (0, ember_tracked_storage_polyfill_1.getValue)(this.collection);
        return this.vals.size;
    }
    [Symbol.iterator]() {
        (0, ember_tracked_storage_polyfill_1.getValue)(this.collection);
        return this.vals[Symbol.iterator]();
    }
    get [Symbol.toStringTag]() {
        return this.vals[Symbol.toStringTag];
    }
    // **** KEY SETTERS ****
    add(value) {
        this.dirtyStorageFor(value);
        (0, ember_tracked_storage_polyfill_1.setValue)(this.collection, null);
        this.vals.add(value);
        return this;
    }
    delete(value) {
        this.dirtyStorageFor(value);
        (0, ember_tracked_storage_polyfill_1.setValue)(this.collection, null);
        return this.vals.delete(value);
    }
    // **** ALL SETTERS ****
    clear() {
        this.storages.forEach((s) => (0, ember_tracked_storage_polyfill_1.setValue)(s, null));
        (0, ember_tracked_storage_polyfill_1.setValue)(this.collection, null);
        this.vals.clear();
    }
}
exports.TrackedSet = TrackedSet;
// So instanceof works
Object.setPrototypeOf(TrackedSet.prototype, Set.prototype);
class TrackedWeakSet {
    constructor(values) {
        this.storages = new WeakMap();
        this.vals = new WeakSet(values);
    }
    storageFor(key) {
        const storages = this.storages;
        let storage = storages.get(key);
        if (storage === undefined) {
            storage = (0, ember_tracked_storage_polyfill_1.createStorage)(null, () => false);
            storages.set(key, storage);
        }
        return storage;
    }
    dirtyStorageFor(key) {
        const storage = this.storages.get(key);
        if (storage) {
            (0, ember_tracked_storage_polyfill_1.setValue)(storage, null);
        }
    }
    has(value) {
        (0, ember_tracked_storage_polyfill_1.getValue)(this.storageFor(value));
        return this.vals.has(value);
    }
    add(value) {
        // Add to vals first to get better error message
        this.vals.add(value);
        this.dirtyStorageFor(value);
        return this;
    }
    delete(value) {
        this.dirtyStorageFor(value);
        return this.vals.delete(value);
    }
    get [Symbol.toStringTag]() {
        return this.vals[Symbol.toStringTag];
    }
}
exports.TrackedWeakSet = TrackedWeakSet;
// So instanceof works
Object.setPrototypeOf(TrackedWeakSet.prototype, WeakSet.prototype);
//# sourceMappingURL=data:application/json;base64,